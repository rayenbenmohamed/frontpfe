{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(authService, router // Injection du Router\n  ) {\n    this.authService = authService;\n    this.router = router;\n    this.username = ''; // Ajoutez un type explicite et une valeur par défaut\n    this.password = ''; // Ajoutez un type explicite et une valeur par défaut\n    this.newUsername = ''; // Ajoutez le champ de nouvel utilisateur\n    this.newPassword = '';\n  }\n  login() {\n    this.authService.login(this.username, this.password).subscribe(response => {\n      if (response && response.token) {\n        this.authService.setToken(response.token);\n        // Après une connexion réussie, les informations sur le compte et les modules sont déjà stockées dans le service AuthService\n        // Vous pouvez y accéder directement depuis ce composant\n        const compte = this.authService.getCompte();\n        const modules = this.authService.getModules();\n        if (compte && modules) {\n          // Faites ce que vous voulez avec les informations sur le compte et les modules, par exemple, les afficher dans la console\n          console.log('Compte:', compte);\n          console.log('Modules:', modules);\n          // Redirigez l'utilisateur vers la page appropriée, par exemple la page de profil\n          this.router.navigate(['/profile']);\n        } else {\n          // Gérer le cas où les données sur le compte ou les modules ne sont pas disponibles\n        }\n      } else {\n        // Gérer l'échec de la connexion ici\n      }\n    }, error => {\n      console.log(error);\n      // Gérer l'échec de la connexion ici\n    });\n  }\n\n  register() {\n    this.authService.register(this.newUsername, this.newPassword).subscribe(registered => {\n      if (registered) {\n        // Rediriger vers la page de connexion après l'inscription réussie\n        this.router.navigate(['/login']);\n      } else {\n        // Gérer l'échec de l'inscription\n      }\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 24,\n    vars: 4,\n    consts: [[1, \"form-group\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"name\", \"username\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"for\", \"newUsername\"], [\"type\", \"text\", \"id\", \"newUsername\", \"name\", \"newUsername\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"newPassword\"], [\"type\", \"password\", \"id\", \"newPassword\", \"name\", \"newPassword\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n        i0.ɵɵtext(2, \"Nom d'utilisateur\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.username = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 0)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_7_listener($event) {\n          return ctx.password = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 0)(9, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_9_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵtext(10, \"Se connecter\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 0)(12, \"h2\");\n        i0.ɵɵtext(13, \"Inscription\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"label\", 6);\n        i0.ɵɵtext(15, \"Nouveau nom d'utilisateur\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_16_listener($event) {\n          return ctx.newUsername = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"div\", 0)(18, \"label\", 8);\n        i0.ɵɵtext(19, \"Nouveau mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_20_listener($event) {\n          return ctx.newPassword = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 0)(22, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_22_listener() {\n          return ctx.register();\n        });\n        i0.ɵɵtext(23, \"S'inscrire\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.username);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.password);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngModel\", ctx.newUsername);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.newPassword);\n      }\n    },\n    dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["LoginComponent","constructor","authService","router","username","password","newUsername","newPassword","login","subscribe","response","token","setToken","compte","getCompte","modules","getModules","console","log","navigate","error","register","registered","_","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoginComponent_Template_input_ngModelChange_3_listener","$event","LoginComponent_Template_input_ngModelChange_7_listener","LoginComponent_Template_button_click_9_listener","LoginComponent_Template_input_ngModelChange_16_listener","LoginComponent_Template_input_ngModelChange_20_listener","LoginComponent_Template_button_click_22_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\ASUS\\Desktop\\Nouveau dossier (2)\\frontpfe\\src\\app\\login\\login.component.ts","C:\\Users\\ASUS\\Desktop\\Nouveau dossier (2)\\frontpfe\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router'; // Import du Router\r\nimport { AuthService } from '../auth.service';\r\nimport { Compte } from '../model/compte';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n  username: string = ''; // Ajoutez un type explicite et une valeur par défaut\r\n  password: string = ''; // Ajoutez un type explicite et une valeur par défaut\r\n  newUsername: string = ''; // Ajoutez le champ de nouvel utilisateur\r\n  newPassword: string = ''; \r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router // Injection du Router\r\n  ) {}\r\n\r\n  login(): void {\r\n    this.authService.login(this.username, this.password).subscribe(response => {\r\n      if (response && response.token) {\r\n        this.authService.setToken(response.token);\r\n\r\n        // Après une connexion réussie, les informations sur le compte et les modules sont déjà stockées dans le service AuthService\r\n        // Vous pouvez y accéder directement depuis ce composant\r\n\r\n        const compte: Compte | null = this.authService.getCompte();\r\n        const modules: Module[] = this.authService.getModules();\r\n\r\n        if (compte && modules) {\r\n          // Faites ce que vous voulez avec les informations sur le compte et les modules, par exemple, les afficher dans la console\r\n          console.log('Compte:', compte);\r\n          console.log('Modules:', modules);\r\n          \r\n          // Redirigez l'utilisateur vers la page appropriée, par exemple la page de profil\r\n          this.router.navigate(['/profile']);\r\n        } else {\r\n          // Gérer le cas où les données sur le compte ou les modules ne sont pas disponibles\r\n        }\r\n      } else {\r\n        // Gérer l'échec de la connexion ici\r\n      }\r\n    }, error => {\r\n      console.log(error);\r\n      // Gérer l'échec de la connexion ici\r\n    });\r\n  }\r\n  register(): void {\r\n    this.authService.register(this.newUsername, this.newPassword).subscribe((registered) => {\r\n      if (registered) {\r\n        // Rediriger vers la page de connexion après l'inscription réussie\r\n        this.router.navigate(['/login']);\r\n      } else {\r\n        // Gérer l'échec de l'inscription\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"form-group\">\r\n  <label for=\"username\">Nom d'utilisateur</label>\r\n  <input type=\"text\" id=\"username\" name=\"username\" [(ngModel)]=\"username\">\r\n</div>\r\n<div class=\"form-group\">\r\n  <label for=\"password\">Mot de passe</label>\r\n  <input type=\"password\" id=\"password\" name=\"password\" [(ngModel)]=\"password\">\r\n</div>\r\n<div class=\"form-group\">\r\n  <button (click)=\"login()\">Se connecter</button>\r\n</div>\r\n\r\n\r\n<div class=\"form-group\">\r\n  <h2>Inscription</h2>\r\n  <label for=\"newUsername\">Nouveau nom d'utilisateur</label>\r\n  <input type=\"text\" id=\"newUsername\" name=\"newUsername\" [(ngModel)]=\"newUsername\">\r\n</div>\r\n<div class=\"form-group\">\r\n  <label for=\"newPassword\">Nouveau mot de passe</label>\r\n  <input type=\"password\" id=\"newPassword\" name=\"newPassword\" [(ngModel)]=\"newPassword\">\r\n</div>\r\n<div class=\"form-group\">\r\n  <button (click)=\"register()\">S'inscrire</button>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}