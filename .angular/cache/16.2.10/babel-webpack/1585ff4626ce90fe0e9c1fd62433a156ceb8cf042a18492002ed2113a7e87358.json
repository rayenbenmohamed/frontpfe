{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FormationService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3001/api'; // Mettez l'URL de votre API Node.js\n  }\n\n  getAllFormations() {\n    return this.http.get(`${this.baseUrl}/formations`);\n  }\n  getFormationById(id) {\n    return this.http.get(`${this.baseUrl}/formations/${id}`);\n  }\n  createFormation(formationData) {\n    return this.http.post(`${this.baseUrl}/formations`, formationData);\n  }\n  updateFormation(id, formationData) {\n    return this.http.put(`${this.baseUrl}/formations/${id}`, formationData);\n  }\n  getFormationsByCategorie(categorieId) {\n    return this.http.get(`${this.baseUrl}/formations/categorie/${categorieId}`);\n  }\n  deleteFormation(id) {\n    return this.http.delete(`${this.baseUrl}/formations/${id}`);\n  }\n  static #_ = this.ɵfac = function FormationService_Factory(t) {\n    return new (t || FormationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormationService,\n    factory: FormationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FormationService","constructor","http","baseUrl","getAllFormations","get","getFormationById","id","createFormation","formationData","post","updateFormation","put","getFormationsByCategorie","categorieId","deleteFormation","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Desktop\\Nouveau dossier (2)\\frontpfe\\src\\app\\services\\formation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormationService {\r\n\r\n  private baseUrl = 'http://localhost:3001/api'; // Mettez l'URL de votre API Node.js\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllFormations(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/formations`);\r\n  }\r\n\r\n  getFormationById(id: string): Observable<any> {\r\n    return this.http.get<any>(`${this.baseUrl}/formations/${id}`);\r\n  }\r\n\r\n  createFormation(formationData: any): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/formations`, formationData);\r\n  }\r\n\r\n  updateFormation(id: string, formationData: any): Observable<any> {\r\n    return this.http.put<any>(`${this.baseUrl}/formations/${id}`, formationData);\r\n  }\r\n\r\n  getFormationsByCategorie(categorieId: string): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/formations/categorie/${categorieId}`);\r\n  }\r\n\r\n  deleteFormation(id: string): Observable<any> {\r\n    return this.http.delete<any>(`${this.baseUrl}/formations/${id}`);\r\n  }\r\n}\r\n"],"mappings":";;AAOA,OAAM,MAAOA,gBAAgB;EAI3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,2BAA2B,CAAC,CAAC;EAEP;;EAExCC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,OAAO,aAAa,CAAC;EAC3D;EAEAG,gBAAgBA,CAACC,EAAU;IACzB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,OAAO,eAAeI,EAAE,EAAE,CAAC;EAC/D;EAEAC,eAAeA,CAACC,aAAkB;IAChC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACP,OAAO,aAAa,EAAEM,aAAa,CAAC;EACzE;EAEAE,eAAeA,CAACJ,EAAU,EAAEE,aAAkB;IAC5C,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAM,GAAG,IAAI,CAACT,OAAO,eAAeI,EAAE,EAAE,EAAEE,aAAa,CAAC;EAC9E;EAEAI,wBAAwBA,CAACC,WAAmB;IAC1C,OAAO,IAAI,CAACZ,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,OAAO,yBAAyBW,WAAW,EAAE,CAAC;EACpF;EAEAC,eAAeA,CAACR,EAAU;IACxB,OAAO,IAAI,CAACL,IAAI,CAACc,MAAM,CAAM,GAAG,IAAI,CAACb,OAAO,eAAeI,EAAE,EAAE,CAAC;EAClE;EAAC,QAAAU,CAAA,G;qBA5BUjB,gBAAgB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBtB,gBAAgB;IAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}