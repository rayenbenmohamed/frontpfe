{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n    this.token = null;\n  }\n  login(username, password) {\n    return this.http.post('http://localhost:3001/api/login', {\n      nomUtilisateur: username,\n      motDePasse: password\n    });\n  }\n  register(username, password) {\n    return this.http.post('http://localhost:3001/api/register', {\n      nomUtilisateur: username,\n      motDePasse: password\n    });\n  }\n  logout() {\n    this.isAuthenticated = false;\n  }\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n  // Méthode pour définir le token\n  setToken(token) {\n    this.token = token;\n    this.isAuthenticated = true; // Mettez à jour le statut d'authentification\n  }\n  // Méthode pour récupérer le token\n  getToken() {\n    return this.token;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","isAuthenticated","token","login","username","password","post","nomUtilisateur","motDePasse","register","logout","isAuthenticatedUser","setToken","getToken","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Desktop\\Nouveau dossier (2)\\frontpfe\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated = false;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3001/api/login', { nomUtilisateur: username, motDePasse: password });\r\n  }\r\n\r\n  register(username: string, password: string): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3001/api/register', { nomUtilisateur: username, motDePasse: password });\r\n  }\r\n\r\n  logout(): void {\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  isAuthenticatedUser(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n  private token: string | null = null;\r\n\r\n// Méthode pour définir le token\r\nsetToken(token: string): void {\r\n  this.token = token;\r\n  this.isAuthenticated = true; // Mettez à jour le statut d'authentification\r\n}\r\n\r\n// Méthode pour récupérer le token\r\ngetToken(): string | null {\r\n  return this.token;\r\n}\r\n}\r\n"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,eAAe,GAAG,KAAK;IAmBvB,KAAAC,KAAK,GAAkB,IAAI;EAjBI;EAEvCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,iCAAiC,EAAE;MAAEC,cAAc,EAAEH,QAAQ;MAAEI,UAAU,EAAEH;IAAQ,CAAE,CAAC;EACnH;EAEAI,QAAQA,CAACL,QAAgB,EAAEC,QAAgB;IACzC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,oCAAoC,EAAE;MAAEC,cAAc,EAAEH,QAAQ;MAAEI,UAAU,EAAEH;IAAQ,CAAE,CAAC;EACtH;EAEAK,MAAMA,CAAA;IACJ,IAAI,CAACT,eAAe,GAAG,KAAK;EAC9B;EAEAU,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACV,eAAe;EAC7B;EAGF;EACAW,QAAQA,CAACV,KAAa;IACpB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACD,eAAe,GAAG,IAAI,CAAC,CAAC;EAC/B;EAEA;EACAY,QAAQA,CAAA;IACN,OAAO,IAAI,CAACX,KAAK;EACnB;EAAC,QAAAY,CAAA,G;qBA/BYhB,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXrB,WAAW;IAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}