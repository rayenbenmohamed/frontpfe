{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isAuthenticated = false;\n  }\n  login(username, password) {\n    // Ajoutez la logique d'authentification ici\n    // Vous pouvez également communiquer avec le backend pour vérifier les informations d'identification\n    this.isAuthenticated = true;\n    return of(true);\n  }\n  register(username, password) {\n    // Ajoutez la logique d'enregistrement ici\n    // Vous pouvez également communiquer avec le backend pour créer un nouvel utilisateur\n    this.isAuthenticated = true;\n    return of(true);\n  }\n  logout() {\n    this.isAuthenticated = false;\n  }\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","AuthService","constructor","isAuthenticated","login","username","password","register","logout","isAuthenticatedUser","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Desktop\\Nouveau dossier (2)\\frontpfe\\src\\app\\auth.service.ts"],"sourcesContent":["// auth.service.ts\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated = false;\r\n\r\n  login(username: string, password: string): Observable<boolean> {\r\n    // Ajoutez la logique d'authentification ici\r\n    // Vous pouvez également communiquer avec le backend pour vérifier les informations d'identification\r\n    this.isAuthenticated = true;\r\n    return of(true);\r\n  }\r\n\r\n  register(username: string, password: string): Observable<boolean> {\r\n    // Ajoutez la logique d'enregistrement ici\r\n    // Vous pouvez également communiquer avec le backend pour créer un nouvel utilisateur\r\n    this.isAuthenticated = true;\r\n    return of(true);\r\n  }\r\n\r\n  logout(): void {\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  isAuthenticatedUser(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAqBA,EAAE,QAAQ,MAAM;;AAKrC,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAIU,KAAAC,eAAe,GAAG,KAAK;;EAE/BC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA;IACA,IAAI,CAACH,eAAe,GAAG,IAAI;IAC3B,OAAOH,EAAE,CAAC,IAAI,CAAC;EACjB;EAEAO,QAAQA,CAACF,QAAgB,EAAEC,QAAgB;IACzC;IACA;IACA,IAAI,CAACH,eAAe,GAAG,IAAI;IAC3B,OAAOH,EAAE,CAAC,IAAI,CAAC;EACjB;EAEAQ,MAAMA,CAAA;IACJ,IAAI,CAACL,eAAe,GAAG,KAAK;EAC9B;EAEAM,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACN,eAAe;EAC7B;EAAC,QAAAO,CAAA,G;qBAvBUT,WAAW;EAAA;EAAA,QAAAU,EAAA,G;WAAXV,WAAW;IAAAW,OAAA,EAAXX,WAAW,CAAAY,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}