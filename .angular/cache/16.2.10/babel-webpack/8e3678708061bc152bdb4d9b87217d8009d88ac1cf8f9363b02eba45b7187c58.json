{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n    this.tokenKey = 'token';\n    this.compteInfo = null;\n    this.userModules = [];\n  }\n  login(username, password) {\n    return this.http.post('http://localhost:3001/api/login', {\n      nomUtilisateur: username,\n      motDePasse: password\n    });\n  }\n  register(username, password) {\n    return this.http.post('http://localhost:3001/api/register', {\n      nomUtilisateur: username,\n      motDePasse: password\n    });\n  }\n  logout() {\n    // Supprimer le token du stockage local lors de la déconnexion\n    localStorage.removeItem(this.tokenKey);\n    this.isAuthenticated = false;\n  }\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n  // Méthode pour définir le token\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n    this.isAuthenticated = true; // Définir l'authentification sur true une fois le token défini\n  }\n  // Méthode pour récupérer le token\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  setCompte(compte) {\n    this.compteInfo = compte;\n  }\n  getCompteInfo() {\n    return this.compteInfo;\n  }\n  setModules(modules) {\n    this.userModules = modules;\n  }\n  getModules() {\n    return this.userModules;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","isAuthenticated","tokenKey","compteInfo","userModules","login","username","password","post","nomUtilisateur","motDePasse","register","logout","localStorage","removeItem","isAuthenticatedUser","setToken","token","setItem","getToken","getItem","setCompte","compte","getCompteInfo","setModules","modules","getModules","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Desktop\\Nouveau dossier (2)\\frontpfe\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated = false;\r\n  private tokenKey = 'token';\r\n  private compteInfo: any = null;\r\n  private userModules: any[] = [];\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3001/api/login', { nomUtilisateur: username, motDePasse: password });\r\n  }\r\n\r\n  register(username: string, password: string): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3001/api/register', { nomUtilisateur: username, motDePasse: password });\r\n  }\r\n\r\n  logout(): void {\r\n    // Supprimer le token du stockage local lors de la déconnexion\r\n    localStorage.removeItem(this.tokenKey);\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  isAuthenticatedUser(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  // Méthode pour définir le token\r\n  setToken(token: string): void {\r\n    localStorage.setItem(this.tokenKey, token);\r\n    this.isAuthenticated = true; // Définir l'authentification sur true une fois le token défini\r\n  }\r\n\r\n  // Méthode pour récupérer le token\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n  setCompte(compte: any): void {\r\n    this.compteInfo = compte;\r\n  }\r\n  \r\n  getCompteInfo(): any {\r\n    return this.compteInfo;\r\n  }\r\n  \r\n  setModules(modules: any[]): void {\r\n    this.userModules = modules;\r\n  }\r\n  \r\n  getModules(): any[] {\r\n    return this.userModules;\r\n  }\r\n}\r\n"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAMtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,eAAe,GAAG,KAAK;IACvB,KAAAC,QAAQ,GAAG,OAAO;IAClB,KAAAC,UAAU,GAAQ,IAAI;IACtB,KAAAC,WAAW,GAAU,EAAE;EAEQ;EAEvCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,iCAAiC,EAAE;MAAEC,cAAc,EAAEH,QAAQ;MAAEI,UAAU,EAAEH;IAAQ,CAAE,CAAC;EACnH;EAEAI,QAAQA,CAACL,QAAgB,EAAEC,QAAgB;IACzC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,oCAAoC,EAAE;MAAEC,cAAc,EAAEH,QAAQ;MAAEI,UAAU,EAAEH;IAAQ,CAAE,CAAC;EACtH;EAEAK,MAAMA,CAAA;IACJ;IACAC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACZ,QAAQ,CAAC;IACtC,IAAI,CAACD,eAAe,GAAG,KAAK;EAC9B;EAEAc,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACd,eAAe;EAC7B;EAEA;EACAe,QAAQA,CAACC,KAAa;IACpBJ,YAAY,CAACK,OAAO,CAAC,IAAI,CAAChB,QAAQ,EAAEe,KAAK,CAAC;IAC1C,IAAI,CAAChB,eAAe,GAAG,IAAI,CAAC,CAAC;EAC/B;EAEA;EACAkB,QAAQA,CAAA;IACN,OAAON,YAAY,CAACO,OAAO,CAAC,IAAI,CAAClB,QAAQ,CAAC;EAC5C;EACAmB,SAASA,CAACC,MAAW;IACnB,IAAI,CAACnB,UAAU,GAAGmB,MAAM;EAC1B;EAEAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACpB,UAAU;EACxB;EAEAqB,UAAUA,CAACC,OAAc;IACvB,IAAI,CAACrB,WAAW,GAAGqB,OAAO;EAC5B;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACtB,WAAW;EACzB;EAAC,QAAAuB,CAAA,G;qBAlDU7B,WAAW,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlC,WAAW;IAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}